<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>DC5</title>
	<link href="https://blog.yasun.dev/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://blog.yasun.dev/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-02-20T12:00:00+00:00</updated>
	<id>https://blog.yasun.dev/atom.xml</id>
	<entry xml:lang="en">
		<title>Withings Bodyの計測結果を取得した</title>
		<published>2022-02-20T12:00:00+00:00</published>
		<updated>2022-02-20T12:00:00+00:00</updated>
		<link href="https://blog.yasun.dev/withings-api/" type="text/html"/>
		<id>https://blog.yasun.dev/withings-api/</id>
		<content type="html">&lt;p&gt;今年から筋トレを開始し、知人に勧められた&lt;code&gt;Withings Body&lt;&#x2F;code&gt;を購入した。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;withings-body&quot;&gt;Withings Body&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.withings.com&#x2F;jp&#x2F;ja&#x2F;scales&quot;&gt;https:&#x2F;&#x2F;www.withings.com&#x2F;jp&#x2F;ja&#x2F;scales&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;WiFi&#x2F;Bluetoothに接続できるスマート体重計。&lt;&#x2F;li&gt;
&lt;li&gt;専用アプリをインストールすることで体重や体脂肪等のダッシュボードを見ることができる。&lt;&#x2F;li&gt;
&lt;li&gt;面白い点としてOAuth認証でWebAPIが公開されていて計測結果の情報に自由にアクセスできる。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;apidedekirukoto&quot;&gt;APIでできること&lt;&#x2F;h1&gt;
&lt;p&gt;計測した結果は殆どアクセスできる。
睡眠パッドやウォッチのAPIも含まれているため色々なエントリポイントがある。
&lt;a href=&quot;https:&#x2F;&#x2F;developer.withings.com&#x2F;api-reference&quot;&gt;api-reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;体重計の情報の取得に必要なAPIは以下。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.withings.com&#x2F;api-reference#tag&#x2F;oauth2&quot;&gt;OAuth2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.withings.com&#x2F;api-reference#tag&#x2F;measure&quot;&gt;Measure&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;api-keytosecretnoqu-de&quot;&gt;API KeyとSecretの取得&lt;&#x2F;h2&gt;
&lt;p&gt;API利用のためには以下からアプリを作成してAPI KeyとSecretの取得する必要がある。
&lt;a href=&quot;https:&#x2F;&#x2F;oauth.withings.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;oauth.withings.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;authentication-codenoqu-de&quot;&gt;Authentication Codeの取得&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.withings.com&#x2F;api-reference#operation&#x2F;oauth2-authorize&quot;&gt;oauth2-authorize&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以下URLにGetでアクセスすることで&lt;code&gt;authentication code&lt;&#x2F;code&gt;を取得できる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#eff1f5;color:#4f5b66;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;account.withings.com&#x2F;oauth2_user&#x2F;authorize2?response_type=code&amp;amp;client_id=`your_client_id`&amp;amp;redirect_uri=https%3A%2F%2Flocalhost&amp;amp;scope=user.info%2Cuser.metrics&amp;amp;state=demo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;今回はCLIから利用を想定しているので&lt;code&gt;redirect_uri&lt;&#x2F;code&gt;にlocalhostに指定してリダイレクトされたURLパラメータから&lt;code&gt;code&lt;&#x2F;code&gt;を取得した。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;code&lt;&#x2F;code&gt;の有効期限は30秒しかないので注意。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;access-tokennoqu-de&quot;&gt;Access Tokenの取得&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;oauth.withings.com&#x2F;api-reference#operation&#x2F;oauth2-getaccesstoken&quot;&gt;oauth2-getaccesstoken&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以下URLにPOSTでアクセスすることで&lt;code&gt;Access Token&lt;&#x2F;code&gt;を取得できる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#eff1f5;color:#4f5b66;&quot;&gt;&lt;code&gt;&lt;span&gt;curl --data &amp;quot;action=requesttoken&amp;amp;grant_type=authorization_code&amp;amp;client_id=`your_client_id`&amp;amp;client_secret=`your_client_secret`&amp;amp;code=`上記で取得したauthentication_code`&amp;amp;redirect_uri=http:&#x2F;&#x2F;localhost&#x2F;&amp;quot; &amp;#39;https:&#x2F;&#x2F;wbsapi.withings.net&#x2F;v2&#x2F;oauth2&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;action&lt;&#x2F;code&gt;と&lt;code&gt;authorization_code&lt;&#x2F;code&gt;は固定の文字列が入る。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;measureqing-bao-noqu-de&quot;&gt;Measure情報の取得&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.withings.com&#x2F;api-reference#operation&#x2F;measure-getmeas&quot;&gt;measure-getmeas&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以下URLにPOSTでアクセスすることで&lt;code&gt;Measure情報&lt;&#x2F;code&gt;を取得できる。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#eff1f5;color:#4f5b66;&quot;&gt;&lt;code&gt;&lt;span&gt;curl --header &amp;quot;Authorization: Bearer `上記で取得したAccess Token`&amp;quot; --data &amp;quot;action=getmeas&amp;amp;meastype=1&amp;amp;category=1&amp;quot; &amp;#39;https:&#x2F;&#x2F;wbsapi.withings.net&#x2F;measure&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;パラメータで指定できる項目が沢山あるが、体重取得時に使うパラメータは以下で良さそう。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#eff1f5;color:#4f5b66;&quot;&gt;&lt;code&gt;&lt;span&gt;meastype: 1 &#x2F;&#x2F; Weight (kg)
&lt;&#x2F;span&gt;&lt;span&gt;category: 1 &#x2F;&#x2F; for real measures
&lt;&#x2F;span&gt;&lt;span&gt;startdate: `unix time` &#x2F;&#x2F; Measures&amp;#39; start date.
&lt;&#x2F;span&gt;&lt;span&gt;enddate:   `unix time` &#x2F;&#x2F; Measures&amp;#39; end date
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;体脂肪など他の情報も同時に取得したい場合は&lt;code&gt;meastype&lt;&#x2F;code&gt;の代わりに&lt;code&gt;meastypes&lt;&#x2F;code&gt;を使用使用する。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#eff1f5;color:#4f5b66;&quot;&gt;&lt;code&gt;&lt;span&gt;meastypes=1,6
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;rustdeapinokuraiantoraiburariwozuo-tuta&quot;&gt;RustでAPIのクライアントライブラリを作った&lt;&#x2F;h1&gt;
&lt;p&gt;結構な頻度でトークンの再取得&#x2F;リフレッシュを行う必要があり大変だったのでRustでAPIクライアントを作った。
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yassun&#x2F;withings-api&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;yassun&#x2F;withings-api&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;こちらを使って定期的に&lt;code&gt;Getmeas&lt;&#x2F;code&gt;を呼ぶことでSlackやLineに最新の測定結果を通知することが可能になった。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ブログをZolaに移行した</title>
		<published>2021-12-28T11:20:00+00:00</published>
		<updated>2021-12-28T11:20:00+00:00</updated>
		<link href="https://blog.yasun.dev/moved-to-zola/" type="text/html"/>
		<id>https://blog.yasun.dev/moved-to-zola/</id>
		<content type="html">&lt;p&gt;ブログをそろそろ再開したいと思い、ついでなので環境も&lt;a href=&quot;https:&#x2F;&#x2F;yasun.hatenablog.jp&#x2F;&quot;&gt;旧ブログ&lt;&#x2F;a&gt;から別のものに移行することにした。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;bi-jiao&quot;&gt;比較&lt;&#x2F;h1&gt;
&lt;p&gt;移行に伴い昨今のSSG事情を調査した。
&lt;a href=&quot;https:&#x2F;&#x2F;jamstack.org&#x2F;generators&#x2F;&quot;&gt;jamstack - Site Generators&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Hugo&lt;&#x2F;code&gt;、&lt;code&gt;Gatsby&lt;&#x2F;code&gt;、&lt;code&gt;Next.js&lt;&#x2F;code&gt;、&lt;code&gt;Hexo&lt;&#x2F;code&gt; あたりが人気 。&lt;code&gt;Jekyll&lt;&#x2F;code&gt;も根強い。&lt;&#x2F;p&gt;
&lt;p&gt;調査中にRust製の&lt;code&gt;Zola&lt;&#x2F;code&gt;というものを見つけ、最近はRustを書くことが多いので使ってみることにした。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zola&quot;&gt;Zola&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Rust製SSG&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;テンプレートエンジンに&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Keats&#x2F;tera&quot;&gt;Tera&lt;&#x2F;a&gt;を採用しており、こちらもRust製。
&lt;ul&gt;
&lt;li&gt;similar to Jinja2, Django templates, Liquid, and Twig.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;コンテンツはCommonMarkで記述する。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;install&quot;&gt;Install&lt;&#x2F;h1&gt;
&lt;p&gt;シングルバイナリなのでbrewでinstallできる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; brew install zola
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;hello-world&quot;&gt;Hello world&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;code&gt;zola init ディレクトリ名&lt;&#x2F;code&gt; で初期構築を対話式で行うことができる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zola&lt;&#x2F;span&gt;&lt;span&gt; init blog
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Welcome&lt;&#x2F;span&gt;&lt;span&gt; to Zola!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Please&lt;&#x2F;span&gt;&lt;span&gt; answer a few questions to get started quickly.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Any&lt;&#x2F;span&gt;&lt;span&gt; choices made can be changed by modifying the `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config.toml&lt;&#x2F;span&gt;&lt;span&gt;` file later.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; What &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is&lt;&#x2F;span&gt;&lt;span&gt; the URL of your site? (https:&#x2F;&#x2F;example.com)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;yassun.github.io&#x2F;blog&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;you&lt;&#x2F;span&gt;&lt;span&gt; want to enable Sass compilation? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;Y&#x2F;n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: Y
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;you&lt;&#x2F;span&gt;&lt;span&gt; want to enable syntax highlighting? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;y&#x2F;N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: y
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;you&lt;&#x2F;span&gt;&lt;span&gt; want to build a search index of the content? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;y&#x2F;N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;: y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;作成直後のディレクトリ構成。config.toml以外は空の状態。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree blog
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;blog
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; config.toml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; content
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; sass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; static
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; templates
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; themes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;zola serve&lt;&#x2F;code&gt; を実行するとローカル環境で表示を確認することができる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; zola serve                                                                                                                                                                                                                           Building site...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Checking&lt;&#x2F;span&gt;&lt;span&gt; all internal links with anchors.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Successfully &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;checked&lt;&#x2F;span&gt;&lt;span&gt; 0 internal link(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt; anchors.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Creating 0 pages (0 orphan) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; 0 sections
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt; in 9ms.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Web&lt;&#x2F;span&gt;&lt;span&gt; server is available at http:&#x2F;&#x2F;127.0.0.1:1111
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;hosting&quot;&gt;Hosting&lt;&#x2F;h1&gt;
&lt;p&gt;試しにGitHub Pagesにホスティングしてみる。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;zola build&lt;&#x2F;code&gt;を実行するとhtmlを&lt;code&gt;public&lt;&#x2F;code&gt;配下に生成できるので
こちらを&lt;code&gt;gh-pages -d public&lt;&#x2F;code&gt;等でgh-pagesにpushすると&lt;code&gt;https:&#x2F;&#x2F;[ユーザ名].github.io&#x2F;[リポジトリ名]&#x2F;&lt;&#x2F;code&gt;にホスティングされる。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; zola build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Checking&lt;&#x2F;span&gt;&lt;span&gt; all internal links with anchors.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Successfully &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;checked&lt;&#x2F;span&gt;&lt;span&gt; 0 internal link(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt; anchors.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; Creating 0 pages (0 orphan) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt; 0 sections
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt; in 13ms.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;CI経由でのデプロイも簡単にできる。&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;deployment&#x2F;github-pages&#x2F;&quot;&gt;deployment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;themes&quot;&gt;Themes&lt;&#x2F;h1&gt;
&lt;p&gt;初期状態では味気ないのでテーマをいれてみる。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;themes&#x2F;installing-and-using-themes&#x2F;&quot;&gt;installing-and-using-themes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;&quot;&gt;ここ&lt;&#x2F;a&gt;から好きなテーマを選択し、該当のリポジトリを&lt;code&gt;thems&lt;&#x2F;code&gt;ディレクトリ配下にcloneもしくは&lt;code&gt;submodule add&lt;&#x2F;code&gt; で追加する。&lt;&#x2F;p&gt;
&lt;p&gt;追加後に&lt;code&gt;config.toml&lt;&#x2F;code&gt;に&lt;code&gt;theme = &amp;quot;テーマ名&amp;quot;&lt;&#x2F;code&gt;の記述をすると有効になる。&lt;&#x2F;p&gt;
&lt;p&gt;今回は&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;themes&#x2F;tale-zola&#x2F;&quot;&gt;tale-zola&lt;&#x2F;a&gt;を選択した。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;content&quot;&gt;Content&lt;&#x2F;h1&gt;
&lt;p&gt;実際にこの記事を書いてみる。
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;content&#x2F;overview&#x2F;&quot;&gt;content&#x2F;overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;content&#x2F;&lt;&#x2F;code&gt;配下に置かれたマークダウンがそのまま記事として生成され、URLリソース等もファイル名とディレクトリに一致する。&lt;&#x2F;p&gt;
&lt;p&gt;表示形式については &lt;code&gt;templates&#x2F;&lt;&#x2F;code&gt;配下のファイルでカスタマイズ可能。
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;documentation&#x2F;templates&#x2F;overview&#x2F;&quot;&gt;templates&#x2F;overview&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;テンプレートの中身は&lt;a href=&quot;https:&#x2F;&#x2F;tera.netlify.app&#x2F;&quot;&gt;Tera&lt;&#x2F;a&gt;を使って記述することができる。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;suo-gan&quot;&gt;所感&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;pros&quot;&gt;Pros&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;シングルバイナリなので依存モジュール等のパッケージ管理が不要。&lt;&#x2F;li&gt;
&lt;li&gt;コマンドがシンプルで覚える事が少なくデプロイまですぐに行うことができる。&lt;&#x2F;li&gt;
&lt;li&gt;ビルドが早い。ビルト時のエラーも親切。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;cons&quot;&gt;Cons&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;公式テーマが少ない。
&lt;ul&gt;
&lt;li&gt;その他のSSGに比べると圧倒的に少ない。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;デザインに関するこだわりも少なく、なるべくシンプルに運用したいと思っていたので自分の要望にはかなりマッチしていた。&lt;&#x2F;p&gt;
&lt;p&gt;このまましばらく運用を続けて行こうと思う。&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hello World</title>
		<published>2021-05-01T11:11:00+00:00</published>
		<updated>2021-05-01T11:11:00+00:00</updated>
		<link href="https://blog.yasun.dev/hello-world/" type="text/html"/>
		<id>https://blog.yasun.dev/hello-world/</id>
		<content type="html">&lt;p&gt;This is the source code of the traditional &lt;em&gt;Hello World&lt;&#x2F;em&gt; program.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; This is a comment, and is ignored by the compiler
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; This is the main function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; Statements here are executed when the compiled binary is called
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a7adba;&quot;&gt;&#x2F;&#x2F; Print text to the console
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;println!&lt;&#x2F;code&gt; is a macro that prints text to the console.&lt;&#x2F;p&gt;
&lt;p&gt;A binary can be generated using the Rust compiler: &lt;code&gt;rustc&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; rustc hello.rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt; will produce a &lt;code&gt;hello&lt;&#x2F;code&gt; binary that can be executed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#eff1f5;color:#4f5b66;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;hello
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt; World!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
</feed>
